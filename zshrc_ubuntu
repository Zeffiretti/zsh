# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#
# if [ -n "$TMUX" ]; then
#   exec tmux new-session -A -s workspace
# fi
#
ulimit -s 65536

if [[ -n $SSH_CONNECTION ]]; then
  export DISPLAY=:0
  if [[ $(printenv | grep -c "VSCODE_") -gt 0 ]]; then

  elif [ -n "$TMUX" ]; then
    # exec tmux new-session -A -s workspace
    # echo "Already in tmux"
  else
    # use tmux-%Y%m%d-%H%M%S as the default session name
    # session_name="tmux-$(date +'%Y%m%d-%H%M%S')"
    # if [ -n "$(tmux list-sessions)" ]; then
    attached=$({echo '-2: exit tmux' && echo '-1: create new session' && tmux list-sessions} | fzf | cut -d: -f1)
    if [ "$attached" = "-1" ]; then
      # Ask the user for a session name
      read "session_name?Enter session name: "
      tmux new-session -s $session_name
    elif [ "$attached" = "-2" ]; then
      # do nothing
    else
      # echo "selected session $attached"
      tmux attach -t "$attached"
    fi
      # tmux attach -t "$(tmux list-sessions | fzf | cut -d: -f1)"
    # else
    #   tmux new-session -s "$session_name"
    # fi
  fi
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi

fi


# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS
# fot path completion after equal-sign
# setopt magic_equal_subst

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
# ZSH_HIGHLIGHT_STYLES[comment]='fg=242'
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

# If you come from bash you might have to change your $PATH.
export PATH="/usr/local/bin:$PATH"

# Path to your oh-my-zsh installation.
# export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="random"
# ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

# source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# source $ZSH/oh-my-zsh.sh

plugins=(git wakatime)
# User configuration
# source $ZSH/oh-my-zsh.sh

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source /opt/ros/noetic/setup.zsh

# figlet "hello hiesh"
# neofetch
alias fastfetch='~/app/fastfetch/build/fastfetch -c ~/app/fastfetch/presets/examples/10.jsonc -l ubuntu_old'
# fastfetch
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/hiesh/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/hiesh/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/hiesh/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/hiesh/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export PATH="$HOME/tools/node-v16.19.1-linux-x64/bin:$PATH:$HOME/.cargo/bin"

alias vim=nvim
alias vi=nvim
alias l="ls -CF"
alias la="ls -lphS"
alias laa="ls -alphS"
alias ll="ls -aLF"
alias cl="clear"
alias cf="clear && fastfetch"
export EDITOR='nvim'

# For tabby ssh directory detection
precmd () { echo -n "\x1b]1337;CurrentDir=$(pwd)\x07" }

# CUDA environment variable
export CUDA_PATH=/usr/local/cuda/
export PATH=$CUDA_PATH/bin:$PATH

alias cats='highlight -O ansi --force -n'

if [[ -n $SSH_CONNECTION ]]; then
# use `maccode .` to open the directiory in ssh client vscode like `code .` on local machine.
mcode() {
    client=$(cut -d' ' -f1 <<<"$SSH_CONNECTION")
    server=bigai-ubuntu
    # echo $client
    for proj in "$@"; do
        proj=$(realpath $proj)
        if [[ -d $proj ]]; then
          ssh $client "export PATH=/usr/local/bin:/opt/homebrew/bin:$PATH; code --folder-uri 'vscode-remote://ssh-remote+$server$proj'"
        elif [[ -f $proj ]]; then
          ssh $client "export PATH=/usr/local/bin:/opt/homebrew/bin:$PATH; code --file-uri 'vscode-remote://ssh-remote+$server$proj'"
        fi
        # export PATH=/usr/local/bin:/opt/homebrew/bin:$PATH
    done
}
wcode() {
    # client=$(cut -d' ' -f1 <<<"$SSH_CONNECTION")
    client=hiesh-hw-wsl
    server=bigai-ubuntu
    for proj in "$@"; do
        proj=$(realpath $proj)
        # if [[ -d $proj ]]; then
        #   ssh -f $client -p 2222 &>/dev/null "export PATH='/mnt/c/users/zeffi/appdata/local/programs/microsoft vs code/bin':$PATH; code-remote --folder-uri 'vscode-remote://ssh-remote+$server$proj'"
        # elif [[ -f $proj ]]; then
        #   ssh -f $client -p 2222 &>/dev/null "export PATH='/mnt/c/Users/zeffi/AppData/Local/Programs/Microsoft VS Code/bin':$PATH; code-remote --file-uri 'vscode-remote://ssh-remote+$server$proj'"
        # fi
        if [[ -d $proj ]]; then
          ssh -f $client &>/dev/null "export PATH='/mnt/c/users/zeffi/appdata/local/programs/microsoft vs code/bin':$PATH; code-remote --folder-uri 'vscode-remote://ssh-remote+$server$proj'"
        elif [[ -f $proj ]]; then
          ssh -f $client &>/dev/null "export PATH='/mnt/c/Users/zeffi/AppData/Local/Programs/Microsoft VS Code/bin':$PATH; code-remote --file-uri 'vscode-remote://ssh-remote+$server$proj'"
        fi
        # ssh $client -p 2222 "'/mnt/c/Users/zeffi/AppData/Local/Programs/Microsoft VS Code/bin/code-remote' --folder-uri 'vscode-remote://ssh-remote+$server$proj'"
        # elif [[ -f $proj ]]; then
        #   ssh $client -p 2222 "export PATH='/mnt/c/Users/zeffi/AppData/Local/Programs/Microsoft VS Code/bin':$PATH; code --file-uri 'vscode-remote://ssh-remote+$server$proj'"
        # fi
        # export PATH=/usr/local/bin:/opt/homebrew/bin:$PATH
    done
}
# alias code=wcode
# alias code="${VSCODE_GIT_ASKPASS_NODE%/*}/bin/remote-cli/code"
# alias code=~/.local/bin/rcode
#
client=$(cut -d' ' -f1 <<<"$SSH_CONNECTION")
host=$(grep -B1 "HostName $client" ~/.ssh/config | head -n1 | cut -d' ' -f2)
  if [[ !(-z ${host}) ]]; then
    echo "Connected ssh client is $host"
    if [[ $host =~ "hw" ]]; then
      alias code=wcode
    fi
      # echo "No matching host found in ~/.ssh/config"
  fi # end host checking
fi # end ssh_connection

# function code() {
#   if [[ -n $SSH_CONNECTION ]]; then
#     wcode $@
#   else
#     code $@
#   fi
# }

#
# if [[ "$VSCODE_IPC_HOOK_CLI" != "" ]]; then
#   cat >$HOME/.vscode_env.sh <<EOF
#   if [[ "\$VSCODE_IPC_HOOK_CLI" = "" ]]; then
#     export VSCODE_IPC_HOOK_CLI="$VSCODE_IPC_HOOK_CLI"
#     alias code="${VSCODE_GIT_ASKPASS_NODE%/*}/bin/code"
#   fi
#   EOF
# fi

# unalias gk

# FBX SDK position
export FBXSDK_ROOT=$HOME/fbx/fbx-202034/sdk

# Pre-built USD toolset
export PATH=$PATH:/usr/local/USD/bin

# fzf settings
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# export FZF_DEFAULT_OPTS="--height 60% --layout=reverse --preview '(highlight -O ansi -n {} || cat {}) 2> /dev/null | head -500'"
# export FZF_DEFAULT_COMMAND='ag -g ""'
alias vimf='fzf --print0 | xargs -0 -r -o nvim'
alias vf='fzf --print0 | xargs -0 -r -o nvim'
gch() {
  git branch | fzf --height=20% --reverse --info=inline | xargs git checkout
}
# alias jo=joshuto
alias jo='joshuto --output-file /tmp/joshutodir; LASTDIR=`cat /tmp/joshutodir`; cd "$LASTDIR"'
alias suggest="gh copilot suggest"
alias explain="gh copilot explain"
# eval "$(gh copilot alias -- zsh)"

source ~/.config/zsh/zshrc

export PATH="/opt/drake/bin${PATH:+:${PATH}}"


# setopt nonomatch

autoload +X -Uz _git && _git &>/dev/null
functions[_git-stash]=${functions[_git-stash]//\\_git-notes /}
# echo -e -n "\e[2 q"
#

# alias tfzf='tmux attach -t $({tmux list-sessions && echo '-1: create new session' && echo '-2: exit tmux'} | fzf | cut -d: -f1)'

(( ! ${+functions[p10k]} )) || p10k finalize


